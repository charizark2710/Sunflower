# Use postgres/example user/password credentials
version: '3.1'

services:
  keycloak:
    container_name: "keycloak"
    restart: unless-stopped
    env_file:
      - .env
    build:
      context: ./RDIPs-Server
      dockerfile: keycloak.Dockerfile
    # command: bash -c "while :; do echo 'Hit CTRL+C'; sleep 1; done"
    command: [ "start-dev", "--import-realm", "--verbose", "--hostname-strict=false", "--hostname=${KEYCLOAK_AUTHEN_URL}" ]
    environment:
      - KC_DB=postgres
      - KC_DB_URL=jdbc:postgresql://postgres/keycloak
      - KC_DB_URL_HOST=${POSTGRES_HOST}
      - KC_DB_URL_PORT=${POSTGRES_PORT}
      - KC_DB_USERNAME=${POSTGRES_USER}
      - KC_DB_PASSWORD=${POSTGRES_PASSWORD}
      - KEYCLOAK_ADMIN=${KEYCLOAK_ADMIN}
      - KEYCLOAK_ADMIN_PASSWORD=${KEYCLOAK_ADMIN_PASSWORD}
      - KC_HOSTNAME_URL=${KEYCLOAK_AUTHEN_URL}
      - KC_HOSTNAME_ADMIN_URL=${KEYCLOAK_AUTHEN_URL}
    depends_on:
      - db
    # ports:
    #   - '9000:8080'
    healthcheck:
      test:
        [
          'CMD-SHELL',
          '[ -f /tmp/HealthCheck.java ] || echo "public class HealthCheck { public static void main(String[] args) throws java.lang.Throwable { System.exit(java.net.HttpURLConnection.HTTP_OK == ((java.net.HttpURLConnection)new java.net.URL(args[0]).openConnection()).getResponseCode() ? 1 : 0); } }" > /tmp/HealthCheck.java && java /tmp/HealthCheck.java http://localhost:8080/health/live'
        ]
      interval: 10s
      retries: 5
      start_period: 20s
    networks:
      pi4:
        aliases:
          - auth.sunflower-rdips
    volumes:
      - keycloak:/opt

  rabbitmq:
    container_name: "rabbitmq"
    restart: unless-stopped
    # command: tail -F /dev/null
    build:
      context: ./RDIPs-Gateway
      dockerfile: Broker.Dockerfile
    environment:
      - RABBITMQ_ERLANG_COOKIE=/var/lib/rabbitmq/.erlang.cookie
      - RABBITMQ_CONFIG_FILES=/etc/rabbitmq/rabbitmq.conf
      - RABBITMQ_MNESIA_BASE=/data/mnesia
      - RABBITMQ_LOG_BASE=/data/log
      - RABBITMQ_ENABLED_PLUGINS_FILE=/etc/rabbitmq/enabled_plugins
    ports:
      - '5672:5672'
      - '15672:15672'
      - '1883:1883'
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 30s
      retries: 3
    networks:
      pi4:
        aliases:
          - amqp-management.sunflower-rdips
          - mqtt.sunflower-rdips
          - amqp.sunflower-rdips
  # gateway:
  #   container_name: "gateway"
  #   # Maybe there some memory leak that prevent docker to excute command so this is good for now
  #   # entrypoint: ["./bin/RDIPs-Gateway"]
  #   entrypoint: ["tail", "-f", "/dev/null"]
  #   build:
  #     context: ./RDIPs-Gateway
  #     dockerfile: Gateway.Dockerfile
  #   env_file:
  #     - .env
  #   ports:
  #     - '8080:8080'
  #   depends_on:
  #     - rabbitmq
  #   volumes:
  #     - './RDIPs-Gateway:/var/lib/gateway'
  #   # command: ["/bin/sh", "-c", "tail -F /dev/null"]
  #   networks:
  #     pi4:
  #       aliases:
  #         - sfBroker
  db:
    container_name: postgres
    env_file:
      - .env
    image: postgres
    restart: unless-stopped
    ports:
      - '${POSTGRES_PORT}:${POSTGRES_PORT}'
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "sh -c 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}'"
        ]
      interval: 30s
      timeout: 60s
      retries: 5
      start_period: 80s
    volumes:
      - db:/var/lib/postgresql/data
      - ./RDIPs-Migration/init_db.sh:/docker-entrypoint-initdb.d/db_init.sh
    networks:
      pi4:
        aliases:
          - sunflower-rdips

  pgadmin:
    container_name: pgadmin4
    image: dpage/pgadmin4
    restart: unless-stopped
    env_file:
      - .env
    ports:
      - "9090:80"
    depends_on:
      - db
    volumes:
      - pgadmin:/var/lib/pgadmin
    networks:
      pi4:
        aliases:
          - sunflower

  api:
    container_name: sunflower_api
    env_file:
      - .env
    build:
      context: ./RDIPs-BE
      dockerfile: Dockerfile
      target: production
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      keycloak:
        condition: service_healthy

    ports:
      - '8080:8080'
    volumes:
      - './RDIPs-BE:/srv/www/volume_sunflower'
    networks:
      pi4:
        aliases:
          - sunflower-rdips
  
  api_bk:
    container_name: sunflower_api_bk
    env_file:
      - .env
    build:
      context: ./RDIPs-BE
      dockerfile: Dockerfile
      target: production
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      keycloak:
        condition: service_healthy
    ports:
      - '8081:8080'
    volumes:
      - './RDIPs-BE:/srv/www/volume_sunflower'
    networks:
      pi4:
        aliases:
          - sunflower-rdips


  ui:
    container_name: sunflower_ui
    env_file:
      - .env
    build:
      context: ./RDIPs-FE
      dockerfile: Dockerfile
    # command: [ "serve", "-s", "build" ]
    depends_on: [ api ]
    ports:
      - '3000:3000'
    networks:
      pi4:
        aliases:
          - sunflower-rdips

  server:
    container_name: sunflower_server
    restart: unless-stopped
    build:
      context: ./RDIPs-Server
    depends_on: [ api, ui, api_bk ]
    ports:
      - "80:80"
      - "81:81"
      - "9000:9000"
      - "443:443"
      - "8882:8883"
      - "8672:8672"
    volumes:
      - './RDIPs-Server/conf.d:/opt/nginx/conf.d'
      - './RDIPs-Server/nginx.conf:/opt/nginx/conf'
      - './RDIPs-Server/stream.conf.d:/opt/nginx/stream.conf.d'
    networks:
      pi4:

  memcached:
    image: 'bitnami/memcached:latest'
    networks:
      pi4:
        aliases:
          - cacheSrv
volumes:
  db:
  pgadmin:
  api:
  keycloak:
networks:
  pi4:
    driver: bridge
